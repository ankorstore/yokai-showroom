// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: gophers.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createGopher = `-- name: CreateGopher :execresult
INSERT INTO gophers (
    name, job
) VALUES (
    ?, ?
)
`

type CreateGopherParams struct {
	Name string         `json:"name"`
	Job  sql.NullString `json:"job"`
}

func (q *Queries) CreateGopher(ctx context.Context, arg CreateGopherParams) (sql.Result, error) {
	return q.exec(ctx, q.createGopherStmt, createGopher, arg.Name, arg.Job)
}

const deleteGopher = `-- name: DeleteGopher :exec
DELETE FROM gophers
WHERE id = ?
`

func (q *Queries) DeleteGopher(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteGopherStmt, deleteGopher, id)
	return err
}

const getGopher = `-- name: GetGopher :one
SELECT g.id, g.name, g.job FROM gophers AS g
WHERE g.id = ?
LIMIT 1
`

func (q *Queries) GetGopher(ctx context.Context, id int32) (Gopher, error) {
	row := q.queryRow(ctx, q.getGopherStmt, getGopher, id)
	var i Gopher
	err := row.Scan(&i.ID, &i.Name, &i.Job)
	return i, err
}

const listGophers = `-- name: ListGophers :many
SELECT g.id, g.name, g.job FROM gophers AS g
ORDER BY g.name
`

func (q *Queries) ListGophers(ctx context.Context) ([]Gopher, error) {
	rows, err := q.query(ctx, q.listGophersStmt, listGophers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gopher
	for rows.Next() {
		var i Gopher
		if err := rows.Scan(&i.ID, &i.Name, &i.Job); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
