// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createGopherStmt, err = db.PrepareContext(ctx, createGopher); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGopher: %w", err)
	}
	if q.deleteGopherStmt, err = db.PrepareContext(ctx, deleteGopher); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGopher: %w", err)
	}
	if q.getGopherStmt, err = db.PrepareContext(ctx, getGopher); err != nil {
		return nil, fmt.Errorf("error preparing query GetGopher: %w", err)
	}
	if q.listGophersStmt, err = db.PrepareContext(ctx, listGophers); err != nil {
		return nil, fmt.Errorf("error preparing query ListGophers: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createGopherStmt != nil {
		if cerr := q.createGopherStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGopherStmt: %w", cerr)
		}
	}
	if q.deleteGopherStmt != nil {
		if cerr := q.deleteGopherStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGopherStmt: %w", cerr)
		}
	}
	if q.getGopherStmt != nil {
		if cerr := q.getGopherStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGopherStmt: %w", cerr)
		}
	}
	if q.listGophersStmt != nil {
		if cerr := q.listGophersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGophersStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db               DBTX
	tx               *sql.Tx
	createGopherStmt *sql.Stmt
	deleteGopherStmt *sql.Stmt
	getGopherStmt    *sql.Stmt
	listGophersStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:               tx,
		tx:               tx,
		createGopherStmt: q.createGopherStmt,
		deleteGopherStmt: q.deleteGopherStmt,
		getGopherStmt:    q.getGopherStmt,
		listGophersStmt:  q.listGophersStmt,
	}
}
